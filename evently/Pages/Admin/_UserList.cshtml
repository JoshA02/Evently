@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using evently.Models
@using System.Security.Claims
@model evently.Pages.Admin.Index

@inject UserManager<User> UserManager;

@{
  // User Search
  if (string.IsNullOrEmpty(Model.UserSearchQuery) || !Model.ModelState.IsValid)
  {
    Model.Users = Model._db.Users.OrderByDescending(u => u.CreationDate).Take(50).ToList();
    TempData["StatusMessage"] = "Showing the first 50 users, sorted by creation date.";
  }
  else
  {
    Model.UserSearchQuery = Model.UserSearchQuery.ToLower();
    // Console.WriteLine($"Searching for users with email or name containing '{UserSearchQuery}'");
    Model.Users = Model._db.Users.OrderByDescending(u => u.CreationDate).Where(u =>
      (u.Email != null && u.Email.ToLower().Contains(Model.UserSearchQuery)) ||
      (u.UserName != null && (u.UserName).ToLower().Contains(Model.UserSearchQuery))
    ).ToList();

    TempData["StatusMessage"] =
      $"Showing users with email or name containing '{Model.UserSearchQuery}', sorted by creation date.";
  }
}


<div>
  <h2>Users</h2>
  <form method="get" class="admin-search-form">
    <input type="text" id="search" placeholder="Search for names.." asp-for="UserSearchQuery">
    <input type="hidden" name="EventSearchQuery" value="@Model.EventSearchQuery" />
    <input type="hidden" name="ContactSearchQuery" value="@Model.ContactSearchQuery" />
    <button type="submit" class="material-symbols-outlined">search</button>
  </form>
  
  <span class="status-message">@TempData["StatusMessage"]</span>
  
  <div class="table-container">
    <table>
      <tr>
        <th>ID</th>
        <th>
          Username
          <span class="material-symbols-outlined sml" style="margin-left: 4px">edit</span>
        </th>
        <th>
          Email
          <span class="material-symbols-outlined sml" style="margin-left: 4px">edit</span>
        </th>
        <th>Role</th>
        <th>Joined</th>
        <th class="center">Password</th>
        <th class="center">Bookings</th>
        <th class="center">Delete</th>
        <th class="center">Save</th>
      </tr>
      @foreach(var user in Model.Users)
      {
        <tr id="@user.Id">
          <td class="id-field">@user.Id</td>
          <td class="username-input-container" id="@user.Id">
            <input class="username-input" placeholder="@user.UserName" />
          </td>
          <td class="email-input-container" id="@user.Email">
            <input class="email-input" placeholder="@user.Email" />
          </td>
    
          <td>
            <select class="role-selector">
              @if (UserManager.IsInRoleAsync(user, "Admin").Result)
              {
                <option value="admin" selected>Admin</option>
                <option value="user">User</option>
              }
              else
              {
                <option value="admin">Admin</option>
                <option value="user" selected>User</option>
              }
            </select>
          </td>
    
          <td>@user.CreationDate</td>
          <td class="center">
            <form method="post" asp-page-handler="ResetPassword" id="test">
              <input type="hidden" name="id" value="@user.Id" />
              <input type="hidden" name="previousSearchQuery" value="@Model.UserSearchQuery" />
              <input type="hidden" name="previousEventSearchQuery" value="@Model.EventSearchQuery" />
              <input type="hidden" name="previousContactSearchQuery" value="@Model.ContactSearchQuery" />
              <button type="submit" class="material-symbols-outlined hidden">lock_reset</button>
            </form>
          </td>
          
          <td class="center">
            <a href="/Identity/Account/Manage/Bookings/@user.Id" class="material-symbols-outlined">calendar_today</a>
          </td>
    
          <td class="center">
            <form method="post" asp-page-handler="DeleteUser">
              <input type="hidden" name="id" value="@user.Id"/>
              <input type="hidden" name="previousSearchQuery" value="@Model.UserSearchQuery" />
              <input type="hidden" name="previousEventSearchQuery" value="@Model.EventSearchQuery" />
              <input type="hidden" name="previousContactSearchQuery" value="@Model.ContactSearchQuery" />
              <button type="submit" class="material-symbols-outlined hidden @(User.FindFirst(ClaimTypes.NameIdentifier)?.Value == user.Id ? "fake-disabled" : "")" >delete</button>
            </form>
          </td>
          
          <td class="center">
            <form method="post" asp-page-handler="SaveUser" id="save-changes-form">
              <input type="hidden" name="id" value="@user.Id"/>
              <input type="hidden" name="username" value="@user.UserName"/>
              <input type="hidden" name="role" value="@(UserManager.IsInRoleAsync(user, "Admin").Result ? "admin" : "user")"/>
              <input type="hidden" name="email" value="@user.Email"/>
              <input type="hidden" name="previousSearchQuery" value="@Model.UserSearchQuery" />
              <input type="hidden" name="previousEventSearchQuery" value="@Model.EventSearchQuery" />
              <input type="hidden" name="previousContactSearchQuery" value="@Model.ContactSearchQuery" />
              <button type="submit" class="material-symbols-outlined hidden" disabled>save</button>
            </form>
          </td>
        </tr>
      }
    </table>
  </div>
</div>